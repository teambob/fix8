*  Fix8 helps you get your FIX client or server up and running quickly. Using one of
	the standard FIX schemas you can have a FIX client or server up and running in next
	to no time.

*  Statically compile your FIX xml schema and quickly build your FIX application on top.
	If you need to add customised messages or fields, simply update the schema and
	recompile.

*  Fix8 supports standard FIX4.X to FIX5.X and FIXT1.X. If you have a custom FIX variant
	Fix8 can use that too. New FIX versions will be supported.

*  Fix8 offers run-time custom fields, message recycling and a meta-data aware test
	harness. Incorporates lock free queues, atomics and many other modern techniques.

*  Fix8 is a complete C++ FIX framework, including client/server session and connection
	classes; support for the standard FIX field types; FIX printer, async logger, async
	message persister and XML configuration classes.

*  Fix8 statically supports nested components and groups. The Fix8 compiler and runtime
	library takes the pain out of using repeating groups.

*  The code generated by Fix8 is compiled by your compiler offering the best opportunity
	for optimisation.

*  The code generated by Fix8 is compiled by your compiler offering the best opportunity
	for optimisation. Fix8 applications are fast. Typical client encode latency is now
	14.7µs, and decode 12.8µs. This is being improved further.

*  Fix8 has been designed to be extended, customised or enhanced. If you have special
	requirements, Fix8 provides a flexible platform to develop your application on.

*  Fix8 supports field and value domain validation, mandatory/optional field assertion,
	field ordering, well-formedness testing, retransmission and standard session semantics.

*  Fix8 runs on industry standard Linux. Other **NIX variants may work too.

===========================================================================================

The system is comprised of a compiler for generating C++ message and field encoders,
decoders and instantiation tables; a runtime library to support the generated code
and framework; and a set of complete client/server test applications.

The basic directory layout is as follows:

./          root directory with configure
compiler/   the f8c compiler source
doc/        doxygen documentation (optionally generated when built)
include/    header files for the runtime library and compiler
runtime/    runtime library source
schema/     quickfix FIX xml schemas
test/       test applications client/server source


DOCUMENTATION
=============

Documentation is available at http://fix8.org/fix8/html/
All the source code is self-documenting using doxygen.


EXTERNAL DEPENDENCIES
=====================

Fix8 requires the followin third-party software (header files and
libraries) being installed to build properly:

- Poco C++ Libraries basic edition
- Intel Threading Building Blocks
- Berkeley DB C++


OPTIONAL DEPENDENCIES
=====================

If you wish to build the html documentation, you will need:

- Doxygen


BUILDING ON UNIX/LINUX/MAC OS X
===============================

The build system is based on automake/autoconf/libtool.
You *must* have libtool installed to build.

% tar xvzf fix8-0.6.7.tar.gz
% cd fix8-0.6.7
% ./configure
% make
% make install


MORE INFORMATION
================

For more information, see the fix8 website http://www.fix8.org

---
